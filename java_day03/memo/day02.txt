입력
	- 커서가 깜빡이고 있는 상태
	입력하기 전에 출력을 통해 어떤 값을 입력해야 할지 사용자에게 알려주어야 한다.

입력 클래스
	Scanner sc = new Scanner(System.in)
	String name = "김세환"
	자료형 변수명 = 값

입력 메소드
	- next() : 사용자가 입력하는 문자열 값
		- 사용자가 입력한 값 중에 공백 또는 줄바꿈 문자를 구분점으로 각 문자열을 분리한다.
		- 첫 번째 문자열을 첫 번째 next()에 담고
		- 두 번째 문자열을 두 번째 next()에 담는다.

	- nextLine() : 사용자가 입력한 문자열 값
		- 공백 또는 줄바꿈 문자도 값으로 취급하기 때문에 그대로 입력 받는다.

	- nextInt(), nextDouble(), ...

----------------------------------------------------------------------------------------

연산자
	기능이 있는 특수문자

연산자의 우선순위
	최우선 연산자
	단항 연산자
	산술 연산자
	쉬프트 연산자
	관계 연산자
	논리 연산자
	삼항 연산자
	대입 연산자

결합성
	하나의 수식에 동일한 연산자가 여러 번 사용되면 알맞은 방향으로 결합되어 연산되는 성질.
--------------------------------------------------------------------------------------------
논리형(boolean)
	참: true
	거짓: false

	boolean 변수명 = 값(true, false);
	-------
	1byte

조건식
	결과가 참 또는 거짓, 둘 중 하나가 나오는 식.

	관계 연산자
		==	: 같다
		!=	: 같지 않다
		>, <	: 초과, 미만
		>=, <=	: 이상, 이하

	논리 연산자
		&&, A && B, AND, 두 조건식 모두 참이면 참
		||, A || B, OR, 둘 중 하나라도 참이면 참

	단항 연산자
		!, !A, NOT, 조건식이 참이면 거짓으로, 거짓이면 참으로 변경
-------------------------------------------------------------------------------------------
삼항 연산자(? :) : 값으로 봐야한다!
	조건식 ? 참 : 거짓

	int result = 10 > 9 ? 10 : 9;
	단, 참과 거짓 자리에는 값만 작성할 수 있다.

삼항 연산자를 사용해야 할 때
	조건식이 딱 한 개 있을 때에만 사용하자!


----------------------------------------------------------------------------------

 ▶ 조건문
	▷ if문
		
	if(조건식){
		실행할 문장;
	}
	위의 조건식 결과와 상관없이 무조건 검사
	if(조건식){
		실행할 문장;
	}
	if(조건식){
		실행할 문장;
	}...


	if(조건식){
		실행할 문장;
	}
	위 조건식이 false일 경우만 검사, 아니면 검사하지 않음.
	else if(조건식){
		실행할 문장;
	}
	...
	}
	else {
		실행할 문장
	}

	▷ switch문

	switch(값){
	case 값1:
		실행할 문장;
		break;
	case 값2:
		실행할 문장;
		break;
	case 값3:
		실행할 문장;
		break;
	...
	default:
		실행할 문장;
		break;
	}


기타 제어문
	break: 즉시 해당 중괄호 영역을 탈출한다.
		- if문 안에서 사용 시 if문을 탈출하지 않고 if문을 감싸고 있는 중괄호 영역을 탈출한다.

	continue: 즉시 다음 반복.
		- 아래에 작성된 코드를 실행하고 싶지 않을 때 사용한다.
		

삼항 연산자, if문, switch문의 비교
	삼항 연산자: 조건식이 1개 있을 경우 사용
	if문: 조건식에 비교(>, <, >=, <=) 연산자를 사용하거나, 여러 개의 조건식을 논리 연산자(&&, ||) 사용
	switch: 하나의 변수에 여러 개의 값이 담길 수 있고, 각 값이 같은 지를 비교할 때 사용

 ▶ 반복문
	대입 연산자(복합 대입 연산자, 누적 연산자)

	증감 연산자
		전위형 : 해당 라인부터 바로 적용
			++data, --data

		후위형 : 다음 라인부터 적용
			data++, data--

		
	▷ for문
		int i = 0; i < 10; i = i + 1
		for(초기식; 조건식; 증감식){
			실행할 문장;
		}

	1. 초기식
	------------
	2. 조건식
	3. 실행할 문장
	4. 증감식
	5. 조건식
	6. 실행할 문장
	7. 증감식
	...

	▷ while문
		while(조건식){
			실행할 문장;
		}

	for문과 while문의 목적
		- for: 몇 번 반복할 지 알 때
		- while: 몇 번 반복할 지 모를 때

	▷ do~while문
		do {
			실행할 문장;
		} while(조건식);
	

--------------------------------------------------------------------------------
배열
	- 저장공간의 나열

배열을 사용하는 이유
	1. 변수를 여러 개 선언하면 이름도 여러 개 생긴다. 이 때 각 저장공간을 관리하기가 불편하다
	따라서 n칸 배열을 한 번만 선언하면 저장공간도 n개 생기고, 이름도 한 개이기 때문에 관리가 쉽다.
	2. 규칙성이 없는 값에 규칙성을 부여하기 위해 사용한다.

배열의 선언
	- 자료형[] 배열명 = {값1, 값2, 값3, ...}; // 어떤 값을 넣을지 알 때 사용한다.
	- 자료형[] 배열명 = new 자료형[칸수]; // 어떤 값을 넣을 지는 모르나, 몇 칸 만들지는 알 때 사용한다.
	- 자료형[] 배열명 = null; // 어떤 값을 넣을지도 모르고, 몇 칸을 만들지도 모를 때 사용한다.
	배열명 = new 자료형[칸수];

	※ new : Heap 메모리에 할당, 초기값을 자동으로 초기화
	※ null : 주소의 초기값, 어떤 주소를 넣을 지 모를 때 작성하는 값
	※ 자바에서 배열은 항상 Heap(동적 메모리)에 할당되기 때문에 메로리 상으로는 동적 배열만 존재한다.

배열의 구조
	int[] arData = {3, 7, 1, 9, 4};
	
	arData라는 이름의 저장공간 한 개가 만들어지며, 여기에는 한 개의 값만 담을 수 있다.
	5개의 값을 담기 위해서는 5칸이 필요하며, 이는 Heap 메모리에 할당된다. 5칸의 저장공간 중
	첫 번째 저장공간의 주소값이 arData에 들어가며, 다음 주소에 접근하기 위해서는 + n을 한다.
	예를 들어 arData + 2는 1이라는 값이 담긴 주소값이 되며,
	*(arData + 2)는 해당 주소에 가서 읽어온 1이라는 값을 치환하여 사용하며, arData[2]로 사용한다
	*연산자가 없기 때문에 위와 같은 식을 []로 치환하여 사용하며, arData[2]로 사용할 수 있다.
	각각의 방 번호를 index라고 부르며, 배열은 시작 주소를 가지고 있기 때문에 인덱스 번호는 항상 0이다.

length
	배열을 선언하면 length라는 상수가 선언되고, 해당 배열의 길이가 담긴다.
	배열명.length로 사용하게 된다.

int[] arData = new int[5]
arData[0] = 10
arData[1] + 9;
System.out.println(arData) // 주소값
arData[2] = arData[0] + arData[1]
System.out.println(arData[5])




















































