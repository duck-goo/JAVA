추상 클래스
	- 필드 안에 구현이 안된 메서드가 선언되어 있는 클래스를 추상 클래스라고 한다.
	이 때 구현되지 않은 메서드를 추상 메서드라고 한다.
	반드시 재정의를 통해 구현을 해야지만 메모리에 할당되기 때문에
	"강제성"을 부여하기 위해서 추상 메서드라고 한다.

인터페이스(interface) : 틀
	- 추상 클래스를 고도화시킨 문법
	상수와 추상메서드만 존재한다
	구현은 지정한 클래스에서 진행하고, 인터페이스를 다른 클래스에 지정할 때에는
	"implements" 키워드를 사용한다.

인터페이스와 추상클래스 간의 관계
	- 인터페이스를 클래스에 바로 지정하면 모든 메서드에 강제성이 부여되어서
	전부 다 구현해야 한다. 하지만 일반적인 상황에서는 모든 것이 아닌
	필요한 메서드를 골라서 재정의 한다.
	인터페이스를 직접 지정하지 않고 다른 클래스를 지정한 후 바디를 만들어 놓는다면
	강제성이 소멸되고 이 클래스를 상속받아서 필드를 구현한다면, 골라서 재정의 할 수 있게 된다.
	이 때 중간에서 강제성을 없애주는 클래스를 추상클래스로 선언하기로 하며,
	추상 클래스 이름 뒤에는 Adapter를 붙여서 목적을 알려준다.

내부 클래스(Inner class)

	하나의 클래스에서 a작업과 b작업이 있을 때에는 따로 분리하여 클래스로 만들지 않고,
	클래스 안에 클래스를 선언하여 설계한다. 이 때 밖에 있는 클래스를 외부 클래스라고 하며,
	안에 선언된 클래스를 내부 클래스라고 한다. 외부 클래스가 메모리에 할당되어야
	내부 클래스를 객체화할 수 있기 때문에 클래스를 숨기기 위해서 내부 클래스를 사용하기도 하며,
	이를 캡슐화 또는 은닉화라고 한다. 내부 클래스는 외부 클래스의 필드이기 때문에
	외부 클래스의 필드를 자신의 필드처럼 가져다 사용할 수 있지만 상속관계가 아니기 때문에
	내부 클래스일지라도 extends를 통해 다른 클래스를 상속받아서 사용할 수 있다.

	※ 어떤 영역 안에 선언된 클래스는 내부 클래스이다.

익명 내부 클래스(Anonymous Inner Class)
	- 이름이 없는 클래스이며 구현되지 않은 필드를 구현하기 위해 일회성으로 생성되는 클래스이다.


함수형 인터페이스(Functional Interface)
	인터페이스 중 추상 메소드를 하나만 가지고 있는 인터페이스를 함수형 인터페이스라고 한다.
	이 때 @FunctionalInterface를 인터페이스 위에 작성하여 단 하나의 추상 메소드만
	선언할 수 있도록 제한해야 한다.

람다식(Lambda Expression)
	이름이 없는 메소드로서 값처럼 사용이 가능하며, 매개변수로도 전달이 가능하다.
	함수형 인터페이스는 추상 메소드가 한 개만 선언되기 때문에 구현할 때 메소드 이름이 필요 없다.
	따라서 람다식을 익명 메소드(Anonymous Method)라고도 부른다.

람다식 문법
	1. (매개변수 형식 나열, ...) -> 리턴값;
	2. (매개변수 형식 나열, ...) -> {2개 이상의 문장 작성; return 리턴값;};
	3. 매개변수가 딱 한 개 있을 경우에만 소괄호 전부 생략 가능





















	